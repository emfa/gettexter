#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -sname exgettext

-define(TAB, dump_table).

main(Files) ->
    ets:new(?TAB, [named_table]),
    [dump_entries(File, []) || File <- Files],
    L = ets:tab2list(?TAB),
    io:format("~p~n", [L]).

dump_entries(File, Opts) ->
    ModuleName = filename:rootname(filename:basename(File)),
    {ok, [], Form} = compile:file(File, [binary, 'P']),
    file:delete(ModuleName ++ ".P"),
    traverse_form(Form, Opts).

%% @doc Recursively walk down the abstract syntax tree and find all
%%      function calls that we want to extract strings/binaries from.
traverse_form(Form, Opts) ->
    put(fname, ""),
    traverse(Form, Opts).

traverse([H|T], Opts) when is_list(H) ->
    traverse_list(H, Opts),
    traverse(T, Opts);
traverse({call, _, _, _} = Call, Opts) ->
    traverse_call(Call, Opts);
traverse([{call,_,_,_} = Call | T], Opts) ->
    traverse_call(Call, Opts),
    traverse(T, Opts);
%%% Retrieve module name from parametrized modules
traverse([{attribute, L, module, {Mod,_Params}} | T], Opts) ->
    traverse([{attribute, L, module, Mod} | T], Opts);
%%% Retrieve module name
traverse([{attribute, _L, module, Mod} | T], Opts) ->
    put(fname, atom_to_list(Mod) ++ ".erl"),
    traverse(T, Opts);
traverse([{block, _, B} | T], Opts) ->
    traverse(B, Opts),
    traverse(T, Opts);
traverse([H|T], Opts) when is_tuple(H) ->
    while(size(H), H, Opts),
    traverse(T, Opts);
traverse([_|T], Opts) ->
    traverse(T, Opts);
traverse(T, Opts) when is_tuple(T) ->
    while(size(T), T, Opts);
traverse(_, _) -> ok.

traverse_list(List, Opts) ->
    lists:map(fun(X) -> traverse(X, Opts) end, List).

while(_, {block, _, B}, Opts) ->
    traverse(B, Opts);
while(N, T, Opts) when N > 0 ->
    traverse(element(N, T), Opts),
    while(N-1, T, Opts);
while(0 ,_ ,_) -> ok. 

-define(ATOM(Atom), {atom, _, Atom}).
-define(STR(Line, Str), {string, Line, Str}).
-define(BIN(Line, Elems), {bin, Line, Elems}).
-define(CALL(Module, Function, Args), {call, _, {remote, _, ?ATOM(Module), ?ATOM(Function)}, Args}).

%% @doc If we find a function call, check if it is any of the ones we can
%%      extract from and if so remove first arg (Domain) and call *_entry
%%      to retrive the entry that goes into the dump. 
%%      NOTE: Does not change anything the AST.
traverse_call(?CALL(gettexter, dpgettext, Args), _Opts) ->
    dump_dpgettext(Args);
traverse_call(?CALL(gettexter, dnpgettext, Args), _Opts) ->
    dump_dnpgettext(Args);
traverse_call(?CALL(_, _, Args), Opts) ->
    traverse_list(Args, Opts).

%% @doc Example:
%%      dpgettext(adomain, undefined, "AString", "alocale")
%%      dpgettext(adomain, undefined, <<"AString">>, <<"alocale">>)
dump_dpgettext([?ATOM(Domain), ?ATOM(undefined), ?STR(L, MsgID), _Locale]) ->
    dump(Domain, {simple, undefined, MsgID}, [L]);
dump_dpgettext([?ATOM(Domain), ?ATOM(undefined), ?BIN(L, MsgID1), _Locale]) ->
    case concat_bin(MsgID1) of
        failed -> ok;
        MsgID -> dump(Domain, {simple, undefined, MsgID}, [L])
    end;
%% @doc Example:
%%      dpgettext(adomain, "AContext", "AString", "alocale")
dump_dpgettext([?ATOM(Domain), ?STR(L1, MsgCtxt), ?STR(L2, MsgID), _Locale]) -> 
    dump(Domain, {simple, MsgCtxt, MsgID}, [L1, L2]);
%% @doc Example:
%%      dpgettext(adomain, <<"AContext">>, <<"AString">>, <<"alocale">>)
dump_dpgettext([?ATOM(Domain), ?BIN(L1, MsgCtxt0), ?BIN(L2, MsgID0), _Locale]) ->
    case concat_bins([MsgCtxt0, MsgID0]) of
        failed -> ok;
        [MsgCtxt, MsgID] -> dump(Domain, {simple, MsgCtxt, MsgID}, [L1, L2])
    end;
dump_dpgettext(_) -> ok.

%% @doc Example:
%%      dnpgettext(adomain, undefined, "Singular", "Plural", 2, "alocale")
dump_dnpgettext([?ATOM(Domain), ?ATOM(undefined), ?STR(L1, Singular), ?STR(L2, Plural), _N, _Locale]) ->
    dump(Domain, {plural, undefined, Singular, Plural}, [L1, L2]);
%% @doc Example:
%%      dnpgettext(adomain, undefined, <<"Singular">>, <<"Plural">>, 2, <<"alocale">>)
dump_dnpgettext([?ATOM(Domain), ?ATOM(undefined), ?BIN(L1, Singular0), ?BIN(L2, Plural0), _N, _Locale]) ->
    case concat_bins([Singular0, Plural0]) of
        failed -> ok;
        [Singular, Plural] -> dump(Domain, {plural, undefined, Singular, Plural}, [L1, L2])
    end;
%% @doc Example:
%%      dnpgettext(adomain, "AContext", "Singular", "Plural", 2, "alocale")
dump_dnpgettext([?ATOM(Domain), ?STR(L1, MsgCtxt), ?STR(L2, Singular), ?STR(L3, Plural), _N, _Locale]) ->
    dump(Domain, {plural, MsgCtxt, Singular, Plural}, [L1, L2, L3]);
%% @doc Example:
%%      dnpgettext(adomain, <<"AContext">>, <<"Singular">>, <<"Plural">>, 2, <<"alocale">>)
dump_dnpgettext([?ATOM(Domain), ?BIN(L1, MsgCtxt0), ?BIN(L2, Singular0), ?BIN(L3, Plural0), _N, _Locale]) ->
    case concat_bins([MsgCtxt0, Singular0, Plural0]) of
        failed -> ok;
        [MsgCtxt, Singular, Plural] -> dump(Domain, {plural, MsgCtxt, Singular, Plural}, [L1, L2, L3])
    end;
dump_dnpgettext(_) -> ok.

%% @doc Bins is a list of list of bin_elements from AST-binaries
%%      If they all contain only string literals we can concatenate
%%      these. So each element in Bins contain bin_elements from a specific
%%      binary. Returns failed all lists did not contain only string literals
concat_bins(Bins) ->
    concat_bins(Bins, []).

concat_bins([], Acc) ->
    lists:reverse(Acc);
concat_bins([Bin | Rest], Acc) ->
    case concat_bin(Bin) of
        failed -> failed;
        BinStr -> concat_bins(Rest, [BinStr|Acc])
    end.

%% @doc Concat all string literal binary elements if possible
%%      else return failed.
concat_bin(Bin) ->
    concat_bin(Bin, []).

concat_bin([], Acc) ->
    lists:concat(lists:reverse(Acc));
concat_bin([{bin_element, _, ?STR(_, Str), default, default} | Rest], Acc) ->
    concat_bin(Rest, [Str|Acc]);
concat_bin(_, _) ->
    failed.

%% @doc Dump Entry from Domain into the epot file with info of where the string
%%      where located
dump(Domain, Entry, Lines) ->
    Key = {Domain, Entry},
    Fname = get(fname),
    Finfo = get_file_info(Key),
    ets:insert(?TAB, {Key, [{Fname,Lines}|Finfo]}).

%% @doc Get the file info of a given Key
get_file_info(Key) ->
    case ets:lookup(?TAB, Key) of
        []             -> [];
        [{_, Finfo}|_] -> Finfo
    end.
